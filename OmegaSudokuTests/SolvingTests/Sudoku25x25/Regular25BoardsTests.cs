using OmegaSudoku.Logic;
using OmegaSudoku.Logic.Validators;
using OmegaSudoku.Models;

namespace OmegaSudokuTests.SolvingTests.Sudoku25x25
{
    /// <summary>
    /// Tests for solving easy, medium, and hard 25x25 sudoku boards.
    /// </summary>
    [TestClass]
    public class Regular25BoardsTests
    {

        // Easy 25x25 boards tests

        [TestMethod]
        public void EasySudokuTest1()
        {
            // Arrange
            string initialBoardString = "0E487:009200I300000=<;0?0090:50>00G=1B00;60A<87FE003000=1BC00;0?070008:5@9200D=1<00?080FE450920000006?A0;80FE400092>I0G0010C0E48705I000003G00000100?0<90:0I>B30H10C00F00<;00E4000H>B1000=0000<@E4075I92:CD=060F?A07@E40I00:50B30H00000000000I02:B0GH>10000D=00000A00@94070000I00GH>A00FE00487030:5C0H00600=000009030:00C000?0006000<;2:5I0B000>6?0=1EA<;0@9000G0>B060D01FEA<;94870002:0:5000CD00B?A=004<0F092870H0BC00A010040;02800930:50=1000000000200@0:0I3CDH>000FE40087030:000000C0A=108709230:0IC00>BA=06000<007090:GH5I0D0>B00160A08;F05I00H00>00A006080FE00:000>000=A000048;0E00002G000006?A000;FE2:7@905I3G000000FE402:0@90H003000CDA<100";
            SudokuBoard board = new SudokuBoard(25, initialBoardString);

            // Act
            bool isSolvedAndValid = SudokuSolver.Solve(board) && BoardValidator.IsBoardValid(board);

            // Assert
            Assert.IsTrue(isSolvedAndValid);
        }


        // Medium 25x25 boards tests

        [TestMethod]
        public void MediumSudokuTest1()
        {
            // Arrange

            string initialBoardString = "00085:002900H400000;>=0?0020:30<00G;1F00=600005B0004000;0FC00=0?050008:3@2900D;1>00?080B0730290000006?A0=80B0700029<H0G0010C0078503H000004G00000100?0>20:0H<F40I10C00B00>=0007000I<F1000;0000>@07053H29:0D;060B?A05@070H00:30F40I00000000000H09:F0GI<10000D;00000A00@27050000H00GI<A00BE00785040:3C0I00600;000002040:00C000?0006000>=900H0F000<6?0;1E0>=0@2000G0<F060D01BE0>=27850009:0:3000CD00F?0;007>0B029850I0FC000010070=09800240:30;1000000000900@0:0H4CDI<000BE70085040:000000C0A;108502940:0HC00<FA;06000>005020:GI3H0D0<F00160A08=B03H00I00<00A0060800E00:000<000;A000078=0E00009G000006?A000=009:5@203H4G000000BE709:0@20I004000CDA>100";
            SudokuBoard board = new SudokuBoard(25, initialBoardString);

            // Act
            bool isSolvedAndValid = SudokuSolver.Solve(board) && BoardValidator.IsBoardValid(board);

            // Assert
            Assert.IsTrue(isSolvedAndValid);
        }

        // Hard 25x25 boards tests

        [TestMethod]
        public void HardSudokuTest1()
        {
            // Arrange
            string initialBoardString
            SudokuBoard board = new SudokuBoard(25, initialBoardString);

            // Act
            bool isSolvedAndValid = SudokuSolver.Solve(board) && BoardValidator.IsBoardValid(board);

            // Assert
            Assert.IsTrue(isSolvedAndValid);
        }


    }
}
